const express = require('express');
const cors = require('cors');
const puppeteer = require('puppeteer');
const axios = require('axios');

const { getTaskFromSqs } = require('./utils/sqs')

const port = process.env.PORT;


const app = express();

app.use(cors());
app.use(express.json());



app.get('/start-crawling', (req, res) => {
    crawlerFunc();
    res.send("bla bla");
})

app.listen(port, () => console.log('listening on port' + port));

 





const sendResultsToServer = async (data) => {
    const URL = 'http://localhost:3000/crawled-pages';
    try {
        const result = await axios.post(URL, {
            data
        })
        console.log(result);
    }catch (err) {
        console.log(err);
    }
}





const crawlDate = async (page, url) => {
    console.log(1)
    try {
        await page.goto(url);
        const result = await page.evaluate(() => {
            const links = [...document.querySelectorAll('a')];
            const title = document.querySelector('title');
            return {
                links: links.map(url => url.href),
                title: title
            };
        });
        console.log(result)
        return result;
    } catch (err) {
        console.log(err)
    }
}


const crawlerFunc = async () => {

    const tasks = await getTaskFromSqs();
    if (!tasks) return;
    console.log(tasks);

    const browser = await puppeteer.launch();
    const page = await browser.newPage();

    tasks.forEach(async (url) => {
        const result = await crawlDate(page, url.Body);
        console.log(result);
        // await sendResultsToServer(result);
    })
    await browser.close();

}

